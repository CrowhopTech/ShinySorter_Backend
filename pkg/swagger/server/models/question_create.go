// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuestionCreate question create
//
// swagger:model questionCreate
type QuestionCreate struct {

	// Whether this functions as an "and" (true, only one option selected) or an "or" question false, default, can select multiple)
	// Required: true
	MutuallyExclusive *bool `json:"mutuallyExclusive"`

	// ordering ID
	// Required: true
	OrderingID *int64 `json:"orderingID"`

	// question text
	// Required: true
	QuestionText *string `json:"questionText"`

	// tag options
	// Required: true
	TagOptions []*TagOption `json:"tagOptions"`
}

// Validate validates this question create
func (m *QuestionCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMutuallyExclusive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderingID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuestionText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuestionCreate) validateMutuallyExclusive(formats strfmt.Registry) error {

	if err := validate.Required("mutuallyExclusive", "body", m.MutuallyExclusive); err != nil {
		return err
	}

	return nil
}

func (m *QuestionCreate) validateOrderingID(formats strfmt.Registry) error {

	if err := validate.Required("orderingID", "body", m.OrderingID); err != nil {
		return err
	}

	return nil
}

func (m *QuestionCreate) validateQuestionText(formats strfmt.Registry) error {

	if err := validate.Required("questionText", "body", m.QuestionText); err != nil {
		return err
	}

	return nil
}

func (m *QuestionCreate) validateTagOptions(formats strfmt.Registry) error {

	if err := validate.Required("tagOptions", "body", m.TagOptions); err != nil {
		return err
	}

	for i := 0; i < len(m.TagOptions); i++ {
		if swag.IsZero(m.TagOptions[i]) { // not required
			continue
		}

		if m.TagOptions[i] != nil {
			if err := m.TagOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this question create based on the context it is used
func (m *QuestionCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTagOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuestionCreate) contextValidateTagOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagOptions); i++ {

		if m.TagOptions[i] != nil {
			if err := m.TagOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuestionCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuestionCreate) UnmarshalBinary(b []byte) error {
	var res QuestionCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
