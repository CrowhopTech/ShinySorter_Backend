// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "multipart/form-data"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Endpoint definitions for the shiny-sorter file sorting project",
    "title": "shiny-sorter",
    "version": "alpha-v0.2"
  },
  "basePath": "/",
  "paths": {
    "/files": {
      "get": {
        "description": "Lists and queries files",
        "operationId": "listFiles",
        "parameters": [
          {
            "$ref": "#/parameters/includeTags"
          },
          {
            "$ref": "#/parameters/includeOperator"
          },
          {
            "$ref": "#/parameters/excludeTags"
          },
          {
            "$ref": "#/parameters/excludeOperator"
          },
          {
            "type": "boolean",
            "description": "Whether to filter to tags that have or have not been tagged",
            "name": "hasBeenTagged",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search was successful (may return an empty array)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/fileEntry"
              }
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      }
    },
    "/files/contents/{id}": {
      "get": {
        "description": "Gets the file contents with the specified id",
        "produces": [
          "application/octet-stream"
        ],
        "operationId": "getFileContent",
        "parameters": [
          {
            "type": "string",
            "description": "File ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Whether to return the actual contents or a thumbnail",
            "name": "thumb",
            "in": "query",
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file or thumbnail contents",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Type": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "The given file was not found."
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      },
      "patch": {
        "description": "Sets the file contents for the specified id",
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "setFileContent",
        "parameters": [
          {
            "type": "file",
            "format": "binary",
            "description": "The file contents to upload.",
            "name": "fileContents",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "File ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The file contents were modified successfully"
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The given file was not found."
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "description": "Gets the file metadata with the specified id",
        "operationId": "getFileById",
        "parameters": [
          {
            "type": "string",
            "description": "File ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found file.",
            "schema": {
              "$ref": "#/definitions/fileEntry"
            }
          },
          "404": {
            "description": "The given file was not found."
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      },
      "post": {
        "description": "Creates a new file entry",
        "operationId": "createFile",
        "parameters": [
          {
            "type": "string",
            "description": "File ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The new file to create",
            "name": "newFile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fileCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "File was created successfully",
            "schema": {
              "$ref": "#/definitions/fileEntry"
            }
          },
          "400": {
            "description": "Some part of the provided File was invalid."
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      },
      "patch": {
        "description": "Modifies the file metadata with the specified id",
        "operationId": "patchFileById",
        "parameters": [
          {
            "type": "string",
            "description": "File ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Patch modifications for the file",
            "name": "patch",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/filePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the modified file.",
            "schema": {
              "$ref": "#/definitions/fileEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "operationId": "checkHealth",
        "responses": {
          "200": {
            "description": "OK message",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          },
          "503": {
            "description": "Server still starting",
            "schema": {
              "type": "string",
              "enum": [
                "Service Unavailable"
              ]
            }
          }
        }
      }
    },
    "/questions": {
      "get": {
        "description": "Lists questions",
        "operationId": "listQuestions",
        "responses": {
          "200": {
            "description": "Questions were listed successfully (array may be empty if no questions are registered)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/questionEntry"
              }
            }
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      },
      "post": {
        "description": "Creates a new question",
        "operationId": "createQuestion",
        "parameters": [
          {
            "description": "The new question to create",
            "name": "newQuestion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/questionCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Question was created successfully",
            "schema": {
              "$ref": "#/definitions/questionEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      }
    },
    "/questions/{id}": {
      "delete": {
        "description": "Deletes a question.",
        "operationId": "deleteQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the question to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question was deleted successfully"
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      },
      "patch": {
        "description": "Modifies question metadata",
        "operationId": "patchQuestionByID",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the question to modify",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Patch modifications for the question",
            "name": "patch",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/questionPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question was modified successfully",
            "schema": {
              "$ref": "#/definitions/questionEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "description": "Lists tags and their metadata",
        "operationId": "listTags",
        "responses": {
          "200": {
            "description": "Tags were listed successfully (array may be empty if no tags are registered)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tagEntry"
              }
            }
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      },
      "post": {
        "description": "Creates a new tag",
        "operationId": "createTag",
        "parameters": [
          {
            "description": "The new tag to create",
            "name": "newTag",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/tagCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag was created successfully",
            "schema": {
              "$ref": "#/definitions/tagEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      }
    },
    "/tags/{id}": {
      "delete": {
        "description": "Deletes a tag. Should also remove it from all files that use it.",
        "operationId": "deleteTag",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the tag to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tag was deleted successfully",
            "schema": {
              "$ref": "#/definitions/tagEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      },
      "patch": {
        "description": "Modifies tag metadata such as description, icon, etc.",
        "operationId": "patchTagByID",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the tag to modify",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Patch modifications for the tag",
            "name": "patch",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tagPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag was modified successfully",
            "schema": {
              "$ref": "#/definitions/tagEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/genericServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "fileCreate": {},
    "fileEntry": {
      "required": [
        "id",
        "md5sum",
        "tags",
        "hasBeenTagged",
        "mimeType"
      ],
      "properties": {
        "hasBeenTagged": {
          "type": "boolean",
          "default": true
        },
        "id": {
          "type": "string",
          "example": "filename.jpg"
        },
        "md5sum": {
          "type": "string",
          "example": "0a8bd0c4863ec1720da0f69d2795d18a"
        },
        "mimeType": {
          "type": "string",
          "example": "image/png"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            5,
            7,
            37
          ]
        }
      }
    },
    "filePatch": {
      "properties": {
        "hasBeenTagged": {
          "type": "boolean",
          "default": true
        },
        "mimeType": {
          "type": "string",
          "example": "image/png"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            5,
            7,
            37
          ]
        }
      }
    },
    "questionCreate": {
      "required": [
        "orderingID",
        "questionText",
        "tagOptions",
        "mutuallyExclusive"
      ],
      "properties": {
        "mutuallyExclusive": {
          "description": "Whether this functions as an \"and\" (true, only one option selected) or an \"or\" question false, default, can select multiple)",
          "type": "boolean"
        },
        "orderingID": {
          "type": "integer"
        },
        "questionText": {
          "type": "string"
        },
        "tagOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagOption"
          }
        }
      }
    },
    "questionEntry": {
      "required": [
        "questionID",
        "orderingID",
        "questionText",
        "tagOptions",
        "mutuallyExclusive"
      ],
      "properties": {
        "mutuallyExclusive": {
          "description": "Whether this functions as an \"and\" (true, only one option selected) or an \"or\" question false, default, can select multiple)",
          "type": "boolean"
        },
        "orderingID": {
          "type": "integer"
        },
        "questionID": {
          "type": "integer"
        },
        "questionText": {
          "type": "string"
        },
        "tagOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagOption"
          }
        }
      },
      "example": {
        "orderingID": 500,
        "questionID": 5,
        "questionText": "What kinds of flowers are present in this picture?",
        "tagOptions": [
          {
            "optionText": "Tulips",
            "tagID": 5
          },
          {
            "optionText": "Roses",
            "tagID": 6
          },
          {
            "optionText": "Violets",
            "tagID": 7
          },
          {
            "optionText": "Daisies",
            "tagID": 8
          }
        ]
      }
    },
    "questionPatch": {
      "properties": {
        "mutuallyExclusive": {
          "description": "Whether this functions as an \"and\" (true, only one option selected) or an \"or\" question false, default, can select multiple)",
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "orderingID": {
          "type": "integer"
        },
        "questionText": {
          "type": "string"
        },
        "tagOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagOption"
          }
        }
      }
    },
    "tagCreate": {
      "required": [
        "name",
        "userFriendlyName",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "This image contains a Tulip"
        },
        "name": {
          "type": "string",
          "example": "flower:type:tulip"
        },
        "userFriendlyName": {
          "type": "string",
          "example": "Tulip"
        }
      }
    },
    "tagEntry": {
      "required": [
        "id",
        "name",
        "userFriendlyName",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "This image contains a Tulip"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "example": "flower:type:tulip"
        },
        "userFriendlyName": {
          "type": "string",
          "example": "Tulip"
        }
      }
    },
    "tagOption": {
      "required": [
        "tagID",
        "optionText"
      ],
      "properties": {
        "optionText": {
          "type": "string"
        },
        "tagID": {
          "type": "integer"
        }
      }
    },
    "tagPatch": {
      "properties": {
        "description": {
          "type": "string",
          "example": "This image contains a Tulip"
        },
        "name": {
          "type": "string",
          "example": "flower:type:tulip"
        },
        "userFriendlyName": {
          "type": "string",
          "example": "Tulip"
        }
      }
    }
  },
  "parameters": {
    "excludeOperator": {
      "enum": [
        "all",
        "any"
      ],
      "type": "string",
      "default": "all",
      "description": "Whether excludeTags requires all tags to match, or just one",
      "name": "excludeOperator",
      "in": "query"
    },
    "excludeTags": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "description": "Tags to exclude in this query, referenced by tag ID",
      "name": "excludeTags",
      "in": "query"
    },
    "includeOperator": {
      "enum": [
        "all",
        "any"
      ],
      "type": "string",
      "default": "all",
      "description": "Whether includeTags requires all tags to match, or just one",
      "name": "includeOperator",
      "in": "query"
    },
    "includeTags": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "description": "Tags to include in this query, referenced by tag ID",
      "name": "includeTags",
      "in": "query"
    }
  },
  "responses": {
    "genericServerError": {
      "description": "Something else went wrong during the request",
      "schema": {
        "type": "string"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "multipart/form-data"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Endpoint definitions for the shiny-sorter file sorting project",
    "title": "shiny-sorter",
    "version": "alpha-v0.2"
  },
  "basePath": "/",
  "paths": {
    "/files": {
      "get": {
        "description": "Lists and queries files",
        "operationId": "listFiles",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Tags to include in this query, referenced by tag ID",
            "name": "includeTags",
            "in": "query"
          },
          {
            "enum": [
              "all",
              "any"
            ],
            "type": "string",
            "default": "all",
            "description": "Whether includeTags requires all tags to match, or just one",
            "name": "includeOperator",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Tags to exclude in this query, referenced by tag ID",
            "name": "excludeTags",
            "in": "query"
          },
          {
            "enum": [
              "all",
              "any"
            ],
            "type": "string",
            "default": "all",
            "description": "Whether excludeTags requires all tags to match, or just one",
            "name": "excludeOperator",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether to filter to tags that have or have not been tagged",
            "name": "hasBeenTagged",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search was successful (may return an empty array)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/fileEntry"
              }
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/files/contents/{id}": {
      "get": {
        "description": "Gets the file contents with the specified id",
        "produces": [
          "application/octet-stream"
        ],
        "operationId": "getFileContent",
        "parameters": [
          {
            "type": "string",
            "description": "File ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Whether to return the actual contents or a thumbnail",
            "name": "thumb",
            "in": "query",
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file or thumbnail contents",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Type": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "The given file was not found."
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "patch": {
        "description": "Sets the file contents for the specified id",
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "setFileContent",
        "parameters": [
          {
            "type": "file",
            "format": "binary",
            "description": "The file contents to upload.",
            "name": "fileContents",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "File ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The file contents were modified successfully"
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The given file was not found."
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "description": "Gets the file metadata with the specified id",
        "operationId": "getFileById",
        "parameters": [
          {
            "type": "string",
            "description": "File ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the found file.",
            "schema": {
              "$ref": "#/definitions/fileEntry"
            }
          },
          "404": {
            "description": "The given file was not found."
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new file entry",
        "operationId": "createFile",
        "parameters": [
          {
            "type": "string",
            "description": "File ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The new file to create",
            "name": "newFile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fileCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "File was created successfully",
            "schema": {
              "$ref": "#/definitions/fileEntry"
            }
          },
          "400": {
            "description": "Some part of the provided File was invalid."
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "patch": {
        "description": "Modifies the file metadata with the specified id",
        "operationId": "patchFileById",
        "parameters": [
          {
            "type": "string",
            "description": "File ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Patch modifications for the file",
            "name": "patch",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/filePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the modified file.",
            "schema": {
              "$ref": "#/definitions/fileEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "operationId": "checkHealth",
        "responses": {
          "200": {
            "description": "OK message",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          },
          "503": {
            "description": "Server still starting",
            "schema": {
              "type": "string",
              "enum": [
                "Service Unavailable"
              ]
            }
          }
        }
      }
    },
    "/questions": {
      "get": {
        "description": "Lists questions",
        "operationId": "listQuestions",
        "responses": {
          "200": {
            "description": "Questions were listed successfully (array may be empty if no questions are registered)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/questionEntry"
              }
            }
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new question",
        "operationId": "createQuestion",
        "parameters": [
          {
            "description": "The new question to create",
            "name": "newQuestion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/questionCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Question was created successfully",
            "schema": {
              "$ref": "#/definitions/questionEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/questions/{id}": {
      "delete": {
        "description": "Deletes a question.",
        "operationId": "deleteQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the question to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question was deleted successfully"
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "patch": {
        "description": "Modifies question metadata",
        "operationId": "patchQuestionByID",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the question to modify",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Patch modifications for the question",
            "name": "patch",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/questionPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question was modified successfully",
            "schema": {
              "$ref": "#/definitions/questionEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "description": "Lists tags and their metadata",
        "operationId": "listTags",
        "responses": {
          "200": {
            "description": "Tags were listed successfully (array may be empty if no tags are registered)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tagEntry"
              }
            }
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new tag",
        "operationId": "createTag",
        "parameters": [
          {
            "description": "The new tag to create",
            "name": "newTag",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/tagCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag was created successfully",
            "schema": {
              "$ref": "#/definitions/tagEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/tags/{id}": {
      "delete": {
        "description": "Deletes a tag. Should also remove it from all files that use it.",
        "operationId": "deleteTag",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the tag to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tag was deleted successfully",
            "schema": {
              "$ref": "#/definitions/tagEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "patch": {
        "description": "Modifies tag metadata such as description, icon, etc.",
        "operationId": "patchTagByID",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the tag to modify",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Patch modifications for the tag",
            "name": "patch",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tagPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag was modified successfully",
            "schema": {
              "$ref": "#/definitions/tagEntry"
            }
          },
          "400": {
            "description": "Some part of the request was invalid. More information will be included in the error string",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Something else went wrong during the request",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "fileCreate": {},
    "fileEntry": {
      "required": [
        "id",
        "md5sum",
        "tags",
        "hasBeenTagged",
        "mimeType"
      ],
      "properties": {
        "hasBeenTagged": {
          "type": "boolean",
          "default": true
        },
        "id": {
          "type": "string",
          "example": "filename.jpg"
        },
        "md5sum": {
          "type": "string",
          "example": "0a8bd0c4863ec1720da0f69d2795d18a"
        },
        "mimeType": {
          "type": "string",
          "example": "image/png"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            5,
            7,
            37
          ]
        }
      }
    },
    "filePatch": {
      "properties": {
        "hasBeenTagged": {
          "type": "boolean",
          "default": true
        },
        "mimeType": {
          "type": "string",
          "example": "image/png"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            5,
            7,
            37
          ]
        }
      }
    },
    "questionCreate": {
      "required": [
        "orderingID",
        "questionText",
        "tagOptions",
        "mutuallyExclusive"
      ],
      "properties": {
        "mutuallyExclusive": {
          "description": "Whether this functions as an \"and\" (true, only one option selected) or an \"or\" question false, default, can select multiple)",
          "type": "boolean"
        },
        "orderingID": {
          "type": "integer"
        },
        "questionText": {
          "type": "string"
        },
        "tagOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagOption"
          }
        }
      }
    },
    "questionEntry": {
      "required": [
        "questionID",
        "orderingID",
        "questionText",
        "tagOptions",
        "mutuallyExclusive"
      ],
      "properties": {
        "mutuallyExclusive": {
          "description": "Whether this functions as an \"and\" (true, only one option selected) or an \"or\" question false, default, can select multiple)",
          "type": "boolean"
        },
        "orderingID": {
          "type": "integer"
        },
        "questionID": {
          "type": "integer"
        },
        "questionText": {
          "type": "string"
        },
        "tagOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagOption"
          }
        }
      },
      "example": {
        "orderingID": 500,
        "questionID": 5,
        "questionText": "What kinds of flowers are present in this picture?",
        "tagOptions": [
          {
            "optionText": "Tulips",
            "tagID": 5
          },
          {
            "optionText": "Roses",
            "tagID": 6
          },
          {
            "optionText": "Violets",
            "tagID": 7
          },
          {
            "optionText": "Daisies",
            "tagID": 8
          }
        ]
      }
    },
    "questionPatch": {
      "properties": {
        "mutuallyExclusive": {
          "description": "Whether this functions as an \"and\" (true, only one option selected) or an \"or\" question false, default, can select multiple)",
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "orderingID": {
          "type": "integer"
        },
        "questionText": {
          "type": "string"
        },
        "tagOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagOption"
          }
        }
      }
    },
    "tagCreate": {
      "required": [
        "name",
        "userFriendlyName",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "This image contains a Tulip"
        },
        "name": {
          "type": "string",
          "example": "flower:type:tulip"
        },
        "userFriendlyName": {
          "type": "string",
          "example": "Tulip"
        }
      }
    },
    "tagEntry": {
      "required": [
        "id",
        "name",
        "userFriendlyName",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "This image contains a Tulip"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "example": "flower:type:tulip"
        },
        "userFriendlyName": {
          "type": "string",
          "example": "Tulip"
        }
      }
    },
    "tagOption": {
      "required": [
        "tagID",
        "optionText"
      ],
      "properties": {
        "optionText": {
          "type": "string"
        },
        "tagID": {
          "type": "integer"
        }
      }
    },
    "tagPatch": {
      "properties": {
        "description": {
          "type": "string",
          "example": "This image contains a Tulip"
        },
        "name": {
          "type": "string",
          "example": "flower:type:tulip"
        },
        "userFriendlyName": {
          "type": "string",
          "example": "Tulip"
        }
      }
    }
  },
  "parameters": {
    "excludeOperator": {
      "enum": [
        "all",
        "any"
      ],
      "type": "string",
      "default": "all",
      "description": "Whether excludeTags requires all tags to match, or just one",
      "name": "excludeOperator",
      "in": "query"
    },
    "excludeTags": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "description": "Tags to exclude in this query, referenced by tag ID",
      "name": "excludeTags",
      "in": "query"
    },
    "includeOperator": {
      "enum": [
        "all",
        "any"
      ],
      "type": "string",
      "default": "all",
      "description": "Whether includeTags requires all tags to match, or just one",
      "name": "includeOperator",
      "in": "query"
    },
    "includeTags": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "description": "Tags to include in this query, referenced by tag ID",
      "name": "includeTags",
      "in": "query"
    }
  },
  "responses": {
    "genericServerError": {
      "description": "Something else went wrong during the request",
      "schema": {
        "type": "string"
      }
    }
  }
}`))
}
