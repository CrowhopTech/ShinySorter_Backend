// Code generated by go-swagger; DO NOT EDIT.

package questions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReorderQuestionsHandlerFunc turns a function with the right signature into a reorder questions handler
type ReorderQuestionsHandlerFunc func(ReorderQuestionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReorderQuestionsHandlerFunc) Handle(params ReorderQuestionsParams) middleware.Responder {
	return fn(params)
}

// ReorderQuestionsHandler interface for that can handle valid reorder questions params
type ReorderQuestionsHandler interface {
	Handle(ReorderQuestionsParams) middleware.Responder
}

// NewReorderQuestions creates a new http.Handler for the reorder questions operation
func NewReorderQuestions(ctx *middleware.Context, handler ReorderQuestionsHandler) *ReorderQuestions {
	return &ReorderQuestions{Context: ctx, Handler: handler}
}

/* ReorderQuestions swagger:route POST /questions/reorder questions reorderQuestions

Reorders all questions (requires all question IDs to be passed in, e.g. a complete order)

*/
type ReorderQuestions struct {
	Context *middleware.Context
	Handler ReorderQuestionsHandler
}

func (o *ReorderQuestions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReorderQuestionsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
