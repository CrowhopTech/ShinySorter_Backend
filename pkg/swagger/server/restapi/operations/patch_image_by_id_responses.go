// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/CrowhopTech/shinysorter/backend/pkg/swagger/server/models"
)

// PatchImageByIDOKCode is the HTTP code returned for type PatchImageByIDOK
const PatchImageByIDOKCode int = 200

/*PatchImageByIDOK Returns the modified image.

swagger:response patchImageByIdOK
*/
type PatchImageByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Image `json:"body,omitempty"`
}

// NewPatchImageByIDOK creates PatchImageByIDOK with default headers values
func NewPatchImageByIDOK() *PatchImageByIDOK {

	return &PatchImageByIDOK{}
}

// WithPayload adds the payload to the patch image by Id o k response
func (o *PatchImageByIDOK) WithPayload(payload *models.Image) *PatchImageByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch image by Id o k response
func (o *PatchImageByIDOK) SetPayload(payload *models.Image) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchImageByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchImageByIDBadRequestCode is the HTTP code returned for type PatchImageByIDBadRequest
const PatchImageByIDBadRequestCode int = 400

/*PatchImageByIDBadRequest Some part of the request was invalid. More information will be included in the error string

swagger:response patchImageByIdBadRequest
*/
type PatchImageByIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPatchImageByIDBadRequest creates PatchImageByIDBadRequest with default headers values
func NewPatchImageByIDBadRequest() *PatchImageByIDBadRequest {

	return &PatchImageByIDBadRequest{}
}

// WithPayload adds the payload to the patch image by Id bad request response
func (o *PatchImageByIDBadRequest) WithPayload(payload string) *PatchImageByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch image by Id bad request response
func (o *PatchImageByIDBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchImageByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
