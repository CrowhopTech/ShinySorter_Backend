// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SetFileContentHandlerFunc turns a function with the right signature into a set file content handler
type SetFileContentHandlerFunc func(SetFileContentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetFileContentHandlerFunc) Handle(params SetFileContentParams) middleware.Responder {
	return fn(params)
}

// SetFileContentHandler interface for that can handle valid set file content params
type SetFileContentHandler interface {
	Handle(SetFileContentParams) middleware.Responder
}

// NewSetFileContent creates a new http.Handler for the set file content operation
func NewSetFileContent(ctx *middleware.Context, handler SetFileContentHandler) *SetFileContent {
	return &SetFileContent{Context: ctx, Handler: handler}
}

/* SetFileContent swagger:route PATCH /files/contents/{id} files setFileContent

Sets the file contents for the specified id

*/
type SetFileContent struct {
	Context *middleware.Context
	Handler SetFileContentHandler
}

func (o *SetFileContent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetFileContentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
