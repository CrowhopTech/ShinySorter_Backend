// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewListFilesParams creates a new ListFilesParams object
// with the default values initialized.
func NewListFilesParams() ListFilesParams {

	var (
		// initialize parameters with default values

		excludeOperatorDefault = string("all")

		includeOperatorDefault = string("all")

		limitDefault = int64(5)
	)

	return ListFilesParams{
		ExcludeOperator: &excludeOperatorDefault,

		IncludeOperator: &includeOperatorDefault,

		Limit: &limitDefault,
	}
}

// ListFilesParams contains all the bound params for the list files operation
// typically these are obtained from a http.Request
//
// swagger:parameters listFiles
type ListFilesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The last object ID of the previous page
	  Max Length: 24
	  Min Length: 24
	  In: query
	*/
	Continue *string
	/*Whether excludeTags requires all tags to match, or just one
	  In: query
	  Default: "all"
	*/
	ExcludeOperator *string
	/*Tags to exclude in this query, referenced by tag ID
	  In: query
	*/
	ExcludeTags []int64
	/*Whether to filter to tags that have or have not been tagged
	  In: query
	*/
	HasBeenTagged *bool
	/*Whether includeTags requires all tags to match, or just one
	  In: query
	  Default: "all"
	*/
	IncludeOperator *string
	/*Tags to include in this query, referenced by tag ID
	  In: query
	*/
	IncludeTags []int64
	/*The count of results to return (aka page size)
	  Maximum: 50
	  Minimum: 1
	  In: query
	  Default: 5
	*/
	Limit *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListFilesParams() beforehand.
func (o *ListFilesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qContinue, qhkContinue, _ := qs.GetOK("continue")
	if err := o.bindContinue(qContinue, qhkContinue, route.Formats); err != nil {
		res = append(res, err)
	}

	qExcludeOperator, qhkExcludeOperator, _ := qs.GetOK("excludeOperator")
	if err := o.bindExcludeOperator(qExcludeOperator, qhkExcludeOperator, route.Formats); err != nil {
		res = append(res, err)
	}

	qExcludeTags, qhkExcludeTags, _ := qs.GetOK("excludeTags")
	if err := o.bindExcludeTags(qExcludeTags, qhkExcludeTags, route.Formats); err != nil {
		res = append(res, err)
	}

	qHasBeenTagged, qhkHasBeenTagged, _ := qs.GetOK("hasBeenTagged")
	if err := o.bindHasBeenTagged(qHasBeenTagged, qhkHasBeenTagged, route.Formats); err != nil {
		res = append(res, err)
	}

	qIncludeOperator, qhkIncludeOperator, _ := qs.GetOK("includeOperator")
	if err := o.bindIncludeOperator(qIncludeOperator, qhkIncludeOperator, route.Formats); err != nil {
		res = append(res, err)
	}

	qIncludeTags, qhkIncludeTags, _ := qs.GetOK("includeTags")
	if err := o.bindIncludeTags(qIncludeTags, qhkIncludeTags, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindContinue binds and validates parameter Continue from query.
func (o *ListFilesParams) bindContinue(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Continue = &raw

	if err := o.validateContinue(formats); err != nil {
		return err
	}

	return nil
}

// validateContinue carries on validations for parameter Continue
func (o *ListFilesParams) validateContinue(formats strfmt.Registry) error {

	if err := validate.MinLength("continue", "query", *o.Continue, 24); err != nil {
		return err
	}

	if err := validate.MaxLength("continue", "query", *o.Continue, 24); err != nil {
		return err
	}

	return nil
}

// bindExcludeOperator binds and validates parameter ExcludeOperator from query.
func (o *ListFilesParams) bindExcludeOperator(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListFilesParams()
		return nil
	}
	o.ExcludeOperator = &raw

	if err := o.validateExcludeOperator(formats); err != nil {
		return err
	}

	return nil
}

// validateExcludeOperator carries on validations for parameter ExcludeOperator
func (o *ListFilesParams) validateExcludeOperator(formats strfmt.Registry) error {

	if err := validate.EnumCase("excludeOperator", "query", *o.ExcludeOperator, []interface{}{"all", "any"}, true); err != nil {
		return err
	}

	return nil
}

// bindExcludeTags binds and validates array parameter ExcludeTags from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *ListFilesParams) bindExcludeTags(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvExcludeTags string
	if len(rawData) > 0 {
		qvExcludeTags = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	excludeTagsIC := swag.SplitByFormat(qvExcludeTags, "")
	if len(excludeTagsIC) == 0 {
		return nil
	}

	var excludeTagsIR []int64
	for i, excludeTagsIV := range excludeTagsIC {
		excludeTagsI, err := swag.ConvertInt64(excludeTagsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "excludeTags", i), "query", "int64", excludeTagsI)
		}

		excludeTagsIR = append(excludeTagsIR, excludeTagsI)
	}

	o.ExcludeTags = excludeTagsIR

	return nil
}

// bindHasBeenTagged binds and validates parameter HasBeenTagged from query.
func (o *ListFilesParams) bindHasBeenTagged(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("hasBeenTagged", "query", "bool", raw)
	}
	o.HasBeenTagged = &value

	return nil
}

// bindIncludeOperator binds and validates parameter IncludeOperator from query.
func (o *ListFilesParams) bindIncludeOperator(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListFilesParams()
		return nil
	}
	o.IncludeOperator = &raw

	if err := o.validateIncludeOperator(formats); err != nil {
		return err
	}

	return nil
}

// validateIncludeOperator carries on validations for parameter IncludeOperator
func (o *ListFilesParams) validateIncludeOperator(formats strfmt.Registry) error {

	if err := validate.EnumCase("includeOperator", "query", *o.IncludeOperator, []interface{}{"all", "any"}, true); err != nil {
		return err
	}

	return nil
}

// bindIncludeTags binds and validates array parameter IncludeTags from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *ListFilesParams) bindIncludeTags(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvIncludeTags string
	if len(rawData) > 0 {
		qvIncludeTags = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	includeTagsIC := swag.SplitByFormat(qvIncludeTags, "")
	if len(includeTagsIC) == 0 {
		return nil
	}

	var includeTagsIR []int64
	for i, includeTagsIV := range includeTagsIC {
		includeTagsI, err := swag.ConvertInt64(includeTagsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "includeTags", i), "query", "int64", includeTagsI)
		}

		includeTagsIR = append(includeTagsIR, includeTagsI)
	}

	o.IncludeTags = includeTagsIR

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *ListFilesParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListFilesParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *ListFilesParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", *o.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "query", *o.Limit, 50, false); err != nil {
		return err
	}

	return nil
}
