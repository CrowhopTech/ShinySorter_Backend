// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// SetFileContentMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var SetFileContentMaxParseMemory int64 = 32 << 20

// NewSetFileContentParams creates a new SetFileContentParams object
//
// There are no default values defined in the spec.
func NewSetFileContentParams() SetFileContentParams {

	return SetFileContentParams{}
}

// SetFileContentParams contains all the bound params for the set file content operation
// typically these are obtained from a http.Request
//
// swagger:parameters setFileContent
type SetFileContentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The file contents to upload.
	  In: formData
	*/
	FileContents io.ReadCloser
	/*File ID
	  Required: true
	  In: path
	*/
	ID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSetFileContentParams() beforehand.
func (o *SetFileContentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(SetFileContentMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	fileContents, fileContentsHeader, err := r.FormFile("fileContents")
	if err != nil && err != http.ErrMissingFile {
		res = append(res, errors.New(400, "reading file %q failed: %v", "fileContents", err))
	} else if err == http.ErrMissingFile {
		// no-op for missing but optional file parameter
	} else if err := o.bindFileContents(fileContents, fileContentsHeader); err != nil {
		res = append(res, err)
	} else {
		o.FileContents = &runtime.File{Data: fileContents, Header: fileContentsHeader}
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFileContents binds file parameter FileContents.
//
// The only supported validations on files are MinLength and MaxLength
func (o *SetFileContentParams) bindFileContents(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *SetFileContentParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}
