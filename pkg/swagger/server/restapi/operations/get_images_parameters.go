// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetImagesParams creates a new GetImagesParams object
// with the default values initialized.
func NewGetImagesParams() GetImagesParams {

	var (
		// initialize parameters with default values

		excludeOperatorDefault = string("all")

		includeOperatorDefault = string("all")
	)

	return GetImagesParams{
		ExcludeOperator: &excludeOperatorDefault,

		IncludeOperator: &includeOperatorDefault,
	}
}

// GetImagesParams contains all the bound params for the get images operation
// typically these are obtained from a http.Request
//
// swagger:parameters getImages
type GetImagesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Whether excludeTags requires all tags to match, or just one
	  In: query
	  Default: "all"
	*/
	ExcludeOperator *string
	/*Tags to include in this query. Can be just the keys, or key-value pairs separated by equal signs
	  In: query
	*/
	ExcludeTags []string
	/*Whether includeTags requires all tags to match, or just one
	  In: query
	  Default: "all"
	*/
	IncludeOperator *string
	/*Tags to include in this query. Can be just the keys, or key-value pairs separated by equal signs
	  In: query
	*/
	IncludeTags []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetImagesParams() beforehand.
func (o *GetImagesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qExcludeOperator, qhkExcludeOperator, _ := qs.GetOK("excludeOperator")
	if err := o.bindExcludeOperator(qExcludeOperator, qhkExcludeOperator, route.Formats); err != nil {
		res = append(res, err)
	}

	qExcludeTags, qhkExcludeTags, _ := qs.GetOK("excludeTags")
	if err := o.bindExcludeTags(qExcludeTags, qhkExcludeTags, route.Formats); err != nil {
		res = append(res, err)
	}

	qIncludeOperator, qhkIncludeOperator, _ := qs.GetOK("includeOperator")
	if err := o.bindIncludeOperator(qIncludeOperator, qhkIncludeOperator, route.Formats); err != nil {
		res = append(res, err)
	}

	qIncludeTags, qhkIncludeTags, _ := qs.GetOK("includeTags")
	if err := o.bindIncludeTags(qIncludeTags, qhkIncludeTags, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindExcludeOperator binds and validates parameter ExcludeOperator from query.
func (o *GetImagesParams) bindExcludeOperator(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetImagesParams()
		return nil
	}
	o.ExcludeOperator = &raw

	if err := o.validateExcludeOperator(formats); err != nil {
		return err
	}

	return nil
}

// validateExcludeOperator carries on validations for parameter ExcludeOperator
func (o *GetImagesParams) validateExcludeOperator(formats strfmt.Registry) error {

	if err := validate.EnumCase("excludeOperator", "query", *o.ExcludeOperator, []interface{}{"all", "any"}, true); err != nil {
		return err
	}

	return nil
}

// bindExcludeTags binds and validates array parameter ExcludeTags from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetImagesParams) bindExcludeTags(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvExcludeTags string
	if len(rawData) > 0 {
		qvExcludeTags = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	excludeTagsIC := swag.SplitByFormat(qvExcludeTags, "")
	if len(excludeTagsIC) == 0 {
		return nil
	}

	var excludeTagsIR []string
	for _, excludeTagsIV := range excludeTagsIC {
		excludeTagsI := excludeTagsIV

		excludeTagsIR = append(excludeTagsIR, excludeTagsI)
	}

	o.ExcludeTags = excludeTagsIR

	return nil
}

// bindIncludeOperator binds and validates parameter IncludeOperator from query.
func (o *GetImagesParams) bindIncludeOperator(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetImagesParams()
		return nil
	}
	o.IncludeOperator = &raw

	if err := o.validateIncludeOperator(formats); err != nil {
		return err
	}

	return nil
}

// validateIncludeOperator carries on validations for parameter IncludeOperator
func (o *GetImagesParams) validateIncludeOperator(formats strfmt.Registry) error {

	if err := validate.EnumCase("includeOperator", "query", *o.IncludeOperator, []interface{}{"all", "any"}, true); err != nil {
		return err
	}

	return nil
}

// bindIncludeTags binds and validates array parameter IncludeTags from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetImagesParams) bindIncludeTags(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvIncludeTags string
	if len(rawData) > 0 {
		qvIncludeTags = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	includeTagsIC := swag.SplitByFormat(qvIncludeTags, "")
	if len(includeTagsIC) == 0 {
		return nil
	}

	var includeTagsIR []string
	for _, includeTagsIV := range includeTagsIC {
		includeTagsI := includeTagsIV

		includeTagsIR = append(includeTagsIR, includeTagsI)
	}

	o.IncludeTags = includeTagsIR

	return nil
}
