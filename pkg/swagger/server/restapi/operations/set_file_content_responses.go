// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SetFileContentOKCode is the HTTP code returned for type SetFileContentOK
const SetFileContentOKCode int = 200

/*SetFileContentOK The file contents were modified successfully

swagger:response setFileContentOK
*/
type SetFileContentOK struct {
}

// NewSetFileContentOK creates SetFileContentOK with default headers values
func NewSetFileContentOK() *SetFileContentOK {

	return &SetFileContentOK{}
}

// WriteResponse to the client
func (o *SetFileContentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SetFileContentBadRequestCode is the HTTP code returned for type SetFileContentBadRequest
const SetFileContentBadRequestCode int = 400

/*SetFileContentBadRequest Some part of the request was invalid. More information will be included in the error string

swagger:response setFileContentBadRequest
*/
type SetFileContentBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSetFileContentBadRequest creates SetFileContentBadRequest with default headers values
func NewSetFileContentBadRequest() *SetFileContentBadRequest {

	return &SetFileContentBadRequest{}
}

// WithPayload adds the payload to the set file content bad request response
func (o *SetFileContentBadRequest) WithPayload(payload string) *SetFileContentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set file content bad request response
func (o *SetFileContentBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetFileContentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SetFileContentNotFoundCode is the HTTP code returned for type SetFileContentNotFound
const SetFileContentNotFoundCode int = 404

/*SetFileContentNotFound The given file was not found.

swagger:response setFileContentNotFound
*/
type SetFileContentNotFound struct {
}

// NewSetFileContentNotFound creates SetFileContentNotFound with default headers values
func NewSetFileContentNotFound() *SetFileContentNotFound {

	return &SetFileContentNotFound{}
}

// WriteResponse to the client
func (o *SetFileContentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// SetFileContentInternalServerErrorCode is the HTTP code returned for type SetFileContentInternalServerError
const SetFileContentInternalServerErrorCode int = 500

/*SetFileContentInternalServerError Something else went wrong during the request

swagger:response setFileContentInternalServerError
*/
type SetFileContentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSetFileContentInternalServerError creates SetFileContentInternalServerError with default headers values
func NewSetFileContentInternalServerError() *SetFileContentInternalServerError {

	return &SetFileContentInternalServerError{}
}

// WithPayload adds the payload to the set file content internal server error response
func (o *SetFileContentInternalServerError) WithPayload(payload string) *SetFileContentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set file content internal server error response
func (o *SetFileContentInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetFileContentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
