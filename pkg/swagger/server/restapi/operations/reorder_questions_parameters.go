// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewReorderQuestionsParams creates a new ReorderQuestionsParams object
//
// There are no default values defined in the spec.
func NewReorderQuestionsParams() ReorderQuestionsParams {

	return ReorderQuestionsParams{}
}

// ReorderQuestionsParams contains all the bound params for the reorder questions operation
// typically these are obtained from a http.Request
//
// swagger:parameters reorderQuestions
type ReorderQuestionsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The new order of the questions
	  Required: true
	  In: query
	*/
	NewOrder []int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewReorderQuestionsParams() beforehand.
func (o *ReorderQuestionsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qNewOrder, qhkNewOrder, _ := qs.GetOK("newOrder")
	if err := o.bindNewOrder(qNewOrder, qhkNewOrder, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindNewOrder binds and validates array parameter NewOrder from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *ReorderQuestionsParams) bindNewOrder(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("newOrder", "query", rawData)
	}
	var qvNewOrder string
	if len(rawData) > 0 {
		qvNewOrder = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	newOrderIC := swag.SplitByFormat(qvNewOrder, "")
	if len(newOrderIC) == 0 {
		return errors.Required("newOrder", "query", newOrderIC)
	}

	var newOrderIR []int64
	for i, newOrderIV := range newOrderIC {
		newOrderI, err := swag.ConvertInt64(newOrderIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "newOrder", i), "query", "int64", newOrderI)
		}

		newOrderIR = append(newOrderIR, newOrderI)
	}

	o.NewOrder = newOrderIR

	return nil
}
