// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/CrowhopTech/shinysorter/backend/pkg/swagger/server/restapi/operations/files"
	"github.com/CrowhopTech/shinysorter/backend/pkg/swagger/server/restapi/operations/questions"
	"github.com/CrowhopTech/shinysorter/backend/pkg/swagger/server/restapi/operations/tags"
)

// NewShinySorterAPI creates a new ShinySorter instance
func NewShinySorterAPI(spec *loads.Document) *ShinySorterAPI {
	return &ShinySorterAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),
		TxtProducer:  runtime.TextProducer(),

		CheckHealthHandler: CheckHealthHandlerFunc(func(params CheckHealthParams) middleware.Responder {
			return middleware.NotImplemented("operation CheckHealth has not yet been implemented")
		}),
		FilesCreateFileHandler: files.CreateFileHandlerFunc(func(params files.CreateFileParams) middleware.Responder {
			return middleware.NotImplemented("operation files.CreateFile has not yet been implemented")
		}),
		QuestionsCreateQuestionHandler: questions.CreateQuestionHandlerFunc(func(params questions.CreateQuestionParams) middleware.Responder {
			return middleware.NotImplemented("operation questions.CreateQuestion has not yet been implemented")
		}),
		TagsCreateTagHandler: tags.CreateTagHandlerFunc(func(params tags.CreateTagParams) middleware.Responder {
			return middleware.NotImplemented("operation tags.CreateTag has not yet been implemented")
		}),
		QuestionsDeleteQuestionHandler: questions.DeleteQuestionHandlerFunc(func(params questions.DeleteQuestionParams) middleware.Responder {
			return middleware.NotImplemented("operation questions.DeleteQuestion has not yet been implemented")
		}),
		TagsDeleteTagHandler: tags.DeleteTagHandlerFunc(func(params tags.DeleteTagParams) middleware.Responder {
			return middleware.NotImplemented("operation tags.DeleteTag has not yet been implemented")
		}),
		FilesGetFileByIDHandler: files.GetFileByIDHandlerFunc(func(params files.GetFileByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation files.GetFileByID has not yet been implemented")
		}),
		FilesGetFileContentHandler: files.GetFileContentHandlerFunc(func(params files.GetFileContentParams) middleware.Responder {
			return middleware.NotImplemented("operation files.GetFileContent has not yet been implemented")
		}),
		FilesListFilesHandler: files.ListFilesHandlerFunc(func(params files.ListFilesParams) middleware.Responder {
			return middleware.NotImplemented("operation files.ListFiles has not yet been implemented")
		}),
		QuestionsListQuestionsHandler: questions.ListQuestionsHandlerFunc(func(params questions.ListQuestionsParams) middleware.Responder {
			return middleware.NotImplemented("operation questions.ListQuestions has not yet been implemented")
		}),
		TagsListTagsHandler: tags.ListTagsHandlerFunc(func(params tags.ListTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation tags.ListTags has not yet been implemented")
		}),
		FilesPatchFileByIDHandler: files.PatchFileByIDHandlerFunc(func(params files.PatchFileByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation files.PatchFileByID has not yet been implemented")
		}),
		QuestionsPatchQuestionByIDHandler: questions.PatchQuestionByIDHandlerFunc(func(params questions.PatchQuestionByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation questions.PatchQuestionByID has not yet been implemented")
		}),
		TagsPatchTagByIDHandler: tags.PatchTagByIDHandlerFunc(func(params tags.PatchTagByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation tags.PatchTagByID has not yet been implemented")
		}),
		QuestionsReorderQuestionsHandler: questions.ReorderQuestionsHandlerFunc(func(params questions.ReorderQuestionsParams) middleware.Responder {
			return middleware.NotImplemented("operation questions.ReorderQuestions has not yet been implemented")
		}),
		FilesSetFileContentHandler: files.SetFileContentHandlerFunc(func(params files.SetFileContentParams) middleware.Responder {
			return middleware.NotImplemented("operation files.SetFileContent has not yet been implemented")
		}),
	}
}

/*ShinySorterAPI Endpoint definitions for the shiny-sorter file sorting project */
type ShinySorterAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/octet-stream
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for the following mime types:
	//   - text/plain
	TxtProducer runtime.Producer

	// CheckHealthHandler sets the operation handler for the check health operation
	CheckHealthHandler CheckHealthHandler
	// FilesCreateFileHandler sets the operation handler for the create file operation
	FilesCreateFileHandler files.CreateFileHandler
	// QuestionsCreateQuestionHandler sets the operation handler for the create question operation
	QuestionsCreateQuestionHandler questions.CreateQuestionHandler
	// TagsCreateTagHandler sets the operation handler for the create tag operation
	TagsCreateTagHandler tags.CreateTagHandler
	// QuestionsDeleteQuestionHandler sets the operation handler for the delete question operation
	QuestionsDeleteQuestionHandler questions.DeleteQuestionHandler
	// TagsDeleteTagHandler sets the operation handler for the delete tag operation
	TagsDeleteTagHandler tags.DeleteTagHandler
	// FilesGetFileByIDHandler sets the operation handler for the get file by Id operation
	FilesGetFileByIDHandler files.GetFileByIDHandler
	// FilesGetFileContentHandler sets the operation handler for the get file content operation
	FilesGetFileContentHandler files.GetFileContentHandler
	// FilesListFilesHandler sets the operation handler for the list files operation
	FilesListFilesHandler files.ListFilesHandler
	// QuestionsListQuestionsHandler sets the operation handler for the list questions operation
	QuestionsListQuestionsHandler questions.ListQuestionsHandler
	// TagsListTagsHandler sets the operation handler for the list tags operation
	TagsListTagsHandler tags.ListTagsHandler
	// FilesPatchFileByIDHandler sets the operation handler for the patch file by Id operation
	FilesPatchFileByIDHandler files.PatchFileByIDHandler
	// QuestionsPatchQuestionByIDHandler sets the operation handler for the patch question by ID operation
	QuestionsPatchQuestionByIDHandler questions.PatchQuestionByIDHandler
	// TagsPatchTagByIDHandler sets the operation handler for the patch tag by ID operation
	TagsPatchTagByIDHandler tags.PatchTagByIDHandler
	// QuestionsReorderQuestionsHandler sets the operation handler for the reorder questions operation
	QuestionsReorderQuestionsHandler questions.ReorderQuestionsHandler
	// FilesSetFileContentHandler sets the operation handler for the set file content operation
	FilesSetFileContentHandler files.SetFileContentHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *ShinySorterAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *ShinySorterAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *ShinySorterAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ShinySorterAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ShinySorterAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ShinySorterAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ShinySorterAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ShinySorterAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ShinySorterAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ShinySorterAPI
func (o *ShinySorterAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.CheckHealthHandler == nil {
		unregistered = append(unregistered, "CheckHealthHandler")
	}
	if o.FilesCreateFileHandler == nil {
		unregistered = append(unregistered, "files.CreateFileHandler")
	}
	if o.QuestionsCreateQuestionHandler == nil {
		unregistered = append(unregistered, "questions.CreateQuestionHandler")
	}
	if o.TagsCreateTagHandler == nil {
		unregistered = append(unregistered, "tags.CreateTagHandler")
	}
	if o.QuestionsDeleteQuestionHandler == nil {
		unregistered = append(unregistered, "questions.DeleteQuestionHandler")
	}
	if o.TagsDeleteTagHandler == nil {
		unregistered = append(unregistered, "tags.DeleteTagHandler")
	}
	if o.FilesGetFileByIDHandler == nil {
		unregistered = append(unregistered, "files.GetFileByIDHandler")
	}
	if o.FilesGetFileContentHandler == nil {
		unregistered = append(unregistered, "files.GetFileContentHandler")
	}
	if o.FilesListFilesHandler == nil {
		unregistered = append(unregistered, "files.ListFilesHandler")
	}
	if o.QuestionsListQuestionsHandler == nil {
		unregistered = append(unregistered, "questions.ListQuestionsHandler")
	}
	if o.TagsListTagsHandler == nil {
		unregistered = append(unregistered, "tags.ListTagsHandler")
	}
	if o.FilesPatchFileByIDHandler == nil {
		unregistered = append(unregistered, "files.PatchFileByIDHandler")
	}
	if o.QuestionsPatchQuestionByIDHandler == nil {
		unregistered = append(unregistered, "questions.PatchQuestionByIDHandler")
	}
	if o.TagsPatchTagByIDHandler == nil {
		unregistered = append(unregistered, "tags.PatchTagByIDHandler")
	}
	if o.QuestionsReorderQuestionsHandler == nil {
		unregistered = append(unregistered, "questions.ReorderQuestionsHandler")
	}
	if o.FilesSetFileContentHandler == nil {
		unregistered = append(unregistered, "files.SetFileContentHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ShinySorterAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ShinySorterAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *ShinySorterAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *ShinySorterAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *ShinySorterAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "text/plain":
			result["text/plain"] = o.TxtProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ShinySorterAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the shiny sorter API
func (o *ShinySorterAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ShinySorterAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/healthz"] = NewCheckHealth(o.context, o.CheckHealthHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/files/{id}"] = files.NewCreateFile(o.context, o.FilesCreateFileHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/questions"] = questions.NewCreateQuestion(o.context, o.QuestionsCreateQuestionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tags"] = tags.NewCreateTag(o.context, o.TagsCreateTagHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/questions/{id}"] = questions.NewDeleteQuestion(o.context, o.QuestionsDeleteQuestionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tags/{id}"] = tags.NewDeleteTag(o.context, o.TagsDeleteTagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files/{id}"] = files.NewGetFileByID(o.context, o.FilesGetFileByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files/contents/{id}"] = files.NewGetFileContent(o.context, o.FilesGetFileContentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files"] = files.NewListFiles(o.context, o.FilesListFilesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/questions"] = questions.NewListQuestions(o.context, o.QuestionsListQuestionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tags"] = tags.NewListTags(o.context, o.TagsListTagsHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/files/{id}"] = files.NewPatchFileByID(o.context, o.FilesPatchFileByIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/questions/{id}"] = questions.NewPatchQuestionByID(o.context, o.QuestionsPatchQuestionByIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/tags/{id}"] = tags.NewPatchTagByID(o.context, o.TagsPatchTagByIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/questions/reorder"] = questions.NewReorderQuestions(o.context, o.QuestionsReorderQuestionsHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/files/contents/{id}"] = files.NewSetFileContent(o.context, o.FilesSetFileContentHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ShinySorterAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ShinySorterAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ShinySorterAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ShinySorterAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *ShinySorterAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
