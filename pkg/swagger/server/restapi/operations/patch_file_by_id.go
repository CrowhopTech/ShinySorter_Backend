// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchFileByIDHandlerFunc turns a function with the right signature into a patch file by Id handler
type PatchFileByIDHandlerFunc func(PatchFileByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchFileByIDHandlerFunc) Handle(params PatchFileByIDParams) middleware.Responder {
	return fn(params)
}

// PatchFileByIDHandler interface for that can handle valid patch file by Id params
type PatchFileByIDHandler interface {
	Handle(PatchFileByIDParams) middleware.Responder
}

// NewPatchFileByID creates a new http.Handler for the patch file by Id operation
func NewPatchFileByID(ctx *middleware.Context, handler PatchFileByIDHandler) *PatchFileByID {
	return &PatchFileByID{Context: ctx, Handler: handler}
}

/* PatchFileByID swagger:route PATCH /files/{id} patchFileById

Modifies the file metadata with the specified id

*/
type PatchFileByID struct {
	Context *middleware.Context
	Handler PatchFileByIDHandler
}

func (o *PatchFileByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchFileByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
