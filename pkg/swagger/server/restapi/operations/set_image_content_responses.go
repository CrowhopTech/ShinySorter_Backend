// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SetImageContentOKCode is the HTTP code returned for type SetImageContentOK
const SetImageContentOKCode int = 200

/*SetImageContentOK The image contents were modified successfully

swagger:response setImageContentOK
*/
type SetImageContentOK struct {
}

// NewSetImageContentOK creates SetImageContentOK with default headers values
func NewSetImageContentOK() *SetImageContentOK {

	return &SetImageContentOK{}
}

// WriteResponse to the client
func (o *SetImageContentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SetImageContentBadRequestCode is the HTTP code returned for type SetImageContentBadRequest
const SetImageContentBadRequestCode int = 400

/*SetImageContentBadRequest Some part of the request was invalid. More information will be included in the error string

swagger:response setImageContentBadRequest
*/
type SetImageContentBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSetImageContentBadRequest creates SetImageContentBadRequest with default headers values
func NewSetImageContentBadRequest() *SetImageContentBadRequest {

	return &SetImageContentBadRequest{}
}

// WithPayload adds the payload to the set image content bad request response
func (o *SetImageContentBadRequest) WithPayload(payload string) *SetImageContentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set image content bad request response
func (o *SetImageContentBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetImageContentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SetImageContentNotFoundCode is the HTTP code returned for type SetImageContentNotFound
const SetImageContentNotFoundCode int = 404

/*SetImageContentNotFound The given image was not found.

swagger:response setImageContentNotFound
*/
type SetImageContentNotFound struct {
}

// NewSetImageContentNotFound creates SetImageContentNotFound with default headers values
func NewSetImageContentNotFound() *SetImageContentNotFound {

	return &SetImageContentNotFound{}
}

// WriteResponse to the client
func (o *SetImageContentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// SetImageContentInternalServerErrorCode is the HTTP code returned for type SetImageContentInternalServerError
const SetImageContentInternalServerErrorCode int = 500

/*SetImageContentInternalServerError Something else went wrong during the request

swagger:response setImageContentInternalServerError
*/
type SetImageContentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSetImageContentInternalServerError creates SetImageContentInternalServerError with default headers values
func NewSetImageContentInternalServerError() *SetImageContentInternalServerError {

	return &SetImageContentInternalServerError{}
}

// WithPayload adds the payload to the set image content internal server error response
func (o *SetImageContentInternalServerError) WithPayload(payload string) *SetImageContentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set image content internal server error response
func (o *SetImageContentInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetImageContentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
