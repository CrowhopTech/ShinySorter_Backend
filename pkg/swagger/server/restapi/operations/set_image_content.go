// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SetImageContentHandlerFunc turns a function with the right signature into a set image content handler
type SetImageContentHandlerFunc func(SetImageContentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetImageContentHandlerFunc) Handle(params SetImageContentParams) middleware.Responder {
	return fn(params)
}

// SetImageContentHandler interface for that can handle valid set image content params
type SetImageContentHandler interface {
	Handle(SetImageContentParams) middleware.Responder
}

// NewSetImageContent creates a new http.Handler for the set image content operation
func NewSetImageContent(ctx *middleware.Context, handler SetImageContentHandler) *SetImageContent {
	return &SetImageContent{Context: ctx, Handler: handler}
}

/* SetImageContent swagger:route PATCH /images/contents/{id} setImageContent

Sets the image contents for the specified id

*/
type SetImageContent struct {
	Context *middleware.Context
	Handler SetImageContentHandler
}

func (o *SetImageContent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetImageContentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
