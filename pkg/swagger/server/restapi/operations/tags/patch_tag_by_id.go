// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchTagByIDHandlerFunc turns a function with the right signature into a patch tag by ID handler
type PatchTagByIDHandlerFunc func(PatchTagByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchTagByIDHandlerFunc) Handle(params PatchTagByIDParams) middleware.Responder {
	return fn(params)
}

// PatchTagByIDHandler interface for that can handle valid patch tag by ID params
type PatchTagByIDHandler interface {
	Handle(PatchTagByIDParams) middleware.Responder
}

// NewPatchTagByID creates a new http.Handler for the patch tag by ID operation
func NewPatchTagByID(ctx *middleware.Context, handler PatchTagByIDHandler) *PatchTagByID {
	return &PatchTagByID{Context: ctx, Handler: handler}
}

/* PatchTagByID swagger:route PATCH /tags/{id} tags patchTagById

Modifies tag metadata such as description, icon, etc.

*/
type PatchTagByID struct {
	Context *middleware.Context
	Handler PatchTagByIDHandler
}

func (o *PatchTagByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchTagByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
