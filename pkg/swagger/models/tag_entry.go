// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TagEntry tag entry
//
// swagger:model tagEntry
type TagEntry struct {

	// description
	// Example: This image contains a Tulip
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: flower:type:tulip
	// Required: true
	Name *string `json:"name"`

	// user friendly name
	// Example: Tulip
	// Required: true
	UserFriendlyName *string `json:"userFriendlyName"`
}

// Validate validates this tag entry
func (m *TagEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFriendlyName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagEntry) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *TagEntry) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TagEntry) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TagEntry) validateUserFriendlyName(formats strfmt.Registry) error {

	if err := validate.Required("userFriendlyName", "body", m.UserFriendlyName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tag entry based on context it is used
func (m *TagEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TagEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagEntry) UnmarshalBinary(b []byte) error {
	var res TagEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
