// Code generated by go-swagger; DO NOT EDIT.

package questions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewReorderQuestionsParams creates a new ReorderQuestionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReorderQuestionsParams() *ReorderQuestionsParams {
	return &ReorderQuestionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReorderQuestionsParamsWithTimeout creates a new ReorderQuestionsParams object
// with the ability to set a timeout on a request.
func NewReorderQuestionsParamsWithTimeout(timeout time.Duration) *ReorderQuestionsParams {
	return &ReorderQuestionsParams{
		timeout: timeout,
	}
}

// NewReorderQuestionsParamsWithContext creates a new ReorderQuestionsParams object
// with the ability to set a context for a request.
func NewReorderQuestionsParamsWithContext(ctx context.Context) *ReorderQuestionsParams {
	return &ReorderQuestionsParams{
		Context: ctx,
	}
}

// NewReorderQuestionsParamsWithHTTPClient creates a new ReorderQuestionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewReorderQuestionsParamsWithHTTPClient(client *http.Client) *ReorderQuestionsParams {
	return &ReorderQuestionsParams{
		HTTPClient: client,
	}
}

/* ReorderQuestionsParams contains all the parameters to send to the API endpoint
   for the reorder questions operation.

   Typically these are written to a http.Request.
*/
type ReorderQuestionsParams struct {

	/* NewOrder.

	   The new order of the questions
	*/
	NewOrder []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the reorder questions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReorderQuestionsParams) WithDefaults() *ReorderQuestionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the reorder questions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReorderQuestionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the reorder questions params
func (o *ReorderQuestionsParams) WithTimeout(timeout time.Duration) *ReorderQuestionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the reorder questions params
func (o *ReorderQuestionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the reorder questions params
func (o *ReorderQuestionsParams) WithContext(ctx context.Context) *ReorderQuestionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the reorder questions params
func (o *ReorderQuestionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the reorder questions params
func (o *ReorderQuestionsParams) WithHTTPClient(client *http.Client) *ReorderQuestionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the reorder questions params
func (o *ReorderQuestionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNewOrder adds the newOrder to the reorder questions params
func (o *ReorderQuestionsParams) WithNewOrder(newOrder []int64) *ReorderQuestionsParams {
	o.SetNewOrder(newOrder)
	return o
}

// SetNewOrder adds the newOrder to the reorder questions params
func (o *ReorderQuestionsParams) SetNewOrder(newOrder []int64) {
	o.NewOrder = newOrder
}

// WriteToRequest writes these params to a swagger request
func (o *ReorderQuestionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NewOrder != nil {

		// binding items for newOrder
		joinedNewOrder := o.bindParamNewOrder(reg)

		// query array param newOrder
		if err := r.SetQueryParam("newOrder", joinedNewOrder...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamReorderQuestions binds the parameter newOrder
func (o *ReorderQuestionsParams) bindParamNewOrder(formats strfmt.Registry) []string {
	newOrderIR := o.NewOrder

	var newOrderIC []string
	for _, newOrderIIR := range newOrderIR { // explode []int64

		newOrderIIV := swag.FormatInt64(newOrderIIR) // int64 as string
		newOrderIC = append(newOrderIC, newOrderIIV)
	}

	// items.CollectionFormat: ""
	newOrderIS := swag.JoinByFormat(newOrderIC, "")

	return newOrderIS
}
