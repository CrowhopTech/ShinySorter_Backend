// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/CrowhopTech/shinysorter/backend/pkg/swagger/models"
)

// PatchImageByIDReader is a Reader for the PatchImageByID structure.
type PatchImageByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchImageByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchImageByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchImageByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchImageByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchImageByIDOK creates a PatchImageByIDOK with default headers values
func NewPatchImageByIDOK() *PatchImageByIDOK {
	return &PatchImageByIDOK{}
}

/* PatchImageByIDOK describes a response with status code 200, with default header values.

Returns the modified image.
*/
type PatchImageByIDOK struct {
	Payload *models.Image
}

func (o *PatchImageByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /images/{id}][%d] patchImageByIdOK  %+v", 200, o.Payload)
}
func (o *PatchImageByIDOK) GetPayload() *models.Image {
	return o.Payload
}

func (o *PatchImageByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Image)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchImageByIDBadRequest creates a PatchImageByIDBadRequest with default headers values
func NewPatchImageByIDBadRequest() *PatchImageByIDBadRequest {
	return &PatchImageByIDBadRequest{}
}

/* PatchImageByIDBadRequest describes a response with status code 400, with default header values.

Some part of the request was invalid. More information will be included in the error string
*/
type PatchImageByIDBadRequest struct {
	Payload string
}

func (o *PatchImageByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /images/{id}][%d] patchImageByIdBadRequest  %+v", 400, o.Payload)
}
func (o *PatchImageByIDBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PatchImageByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchImageByIDInternalServerError creates a PatchImageByIDInternalServerError with default headers values
func NewPatchImageByIDInternalServerError() *PatchImageByIDInternalServerError {
	return &PatchImageByIDInternalServerError{}
}

/* PatchImageByIDInternalServerError describes a response with status code 500, with default header values.

Something else went wrong during the request
*/
type PatchImageByIDInternalServerError struct {
	Payload string
}

func (o *PatchImageByIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /images/{id}][%d] patchImageByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchImageByIDInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PatchImageByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
