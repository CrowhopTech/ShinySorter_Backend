// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetImageContentReader is a Reader for the GetImageContent structure.
type GetImageContentReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *GetImageContentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetImageContentOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetImageContentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetImageContentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetImageContentOK creates a GetImageContentOK with default headers values
func NewGetImageContentOK(writer io.Writer) *GetImageContentOK {
	return &GetImageContentOK{

		Payload: writer,
	}
}

/* GetImageContentOK describes a response with status code 200, with default header values.

Returns the image contents
*/
type GetImageContentOK struct {
	ContentType string

	Payload io.Writer
}

func (o *GetImageContentOK) Error() string {
	return fmt.Sprintf("[GET /images/contents/{id}][%d] getImageContentOK  %+v", 200, o.Payload)
}
func (o *GetImageContentOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *GetImageContentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Type
	hdrContentType := response.GetHeader("Content-Type")

	if hdrContentType != "" {
		o.ContentType = hdrContentType
	}

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageContentNotFound creates a GetImageContentNotFound with default headers values
func NewGetImageContentNotFound() *GetImageContentNotFound {
	return &GetImageContentNotFound{}
}

/* GetImageContentNotFound describes a response with status code 404, with default header values.

The given image was not found.
*/
type GetImageContentNotFound struct {
}

func (o *GetImageContentNotFound) Error() string {
	return fmt.Sprintf("[GET /images/contents/{id}][%d] getImageContentNotFound ", 404)
}

func (o *GetImageContentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetImageContentInternalServerError creates a GetImageContentInternalServerError with default headers values
func NewGetImageContentInternalServerError() *GetImageContentInternalServerError {
	return &GetImageContentInternalServerError{}
}

/* GetImageContentInternalServerError describes a response with status code 500, with default header values.

Something else went wrong during the request
*/
type GetImageContentInternalServerError struct {
	Payload string
}

func (o *GetImageContentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /images/contents/{id}][%d] getImageContentInternalServerError  %+v", 500, o.Payload)
}
func (o *GetImageContentInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetImageContentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
