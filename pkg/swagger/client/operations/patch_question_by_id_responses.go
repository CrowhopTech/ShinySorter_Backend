// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/CrowhopTech/shinysorter/backend/pkg/swagger/models"
)

// PatchQuestionByIDReader is a Reader for the PatchQuestionByID structure.
type PatchQuestionByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchQuestionByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchQuestionByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchQuestionByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchQuestionByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchQuestionByIDOK creates a PatchQuestionByIDOK with default headers values
func NewPatchQuestionByIDOK() *PatchQuestionByIDOK {
	return &PatchQuestionByIDOK{}
}

/* PatchQuestionByIDOK describes a response with status code 200, with default header values.

Question was modified successfully
*/
type PatchQuestionByIDOK struct {
	Payload *models.QuestionEntry
}

func (o *PatchQuestionByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /questions/{id}][%d] patchQuestionByIdOK  %+v", 200, o.Payload)
}
func (o *PatchQuestionByIDOK) GetPayload() *models.QuestionEntry {
	return o.Payload
}

func (o *PatchQuestionByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QuestionEntry)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchQuestionByIDBadRequest creates a PatchQuestionByIDBadRequest with default headers values
func NewPatchQuestionByIDBadRequest() *PatchQuestionByIDBadRequest {
	return &PatchQuestionByIDBadRequest{}
}

/* PatchQuestionByIDBadRequest describes a response with status code 400, with default header values.

Some part of the request was invalid. More information will be included in the error string
*/
type PatchQuestionByIDBadRequest struct {
	Payload string
}

func (o *PatchQuestionByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /questions/{id}][%d] patchQuestionByIdBadRequest  %+v", 400, o.Payload)
}
func (o *PatchQuestionByIDBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PatchQuestionByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchQuestionByIDInternalServerError creates a PatchQuestionByIDInternalServerError with default headers values
func NewPatchQuestionByIDInternalServerError() *PatchQuestionByIDInternalServerError {
	return &PatchQuestionByIDInternalServerError{}
}

/* PatchQuestionByIDInternalServerError describes a response with status code 500, with default header values.

Something else went wrong during the request
*/
type PatchQuestionByIDInternalServerError struct {
	Payload string
}

func (o *PatchQuestionByIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /questions/{id}][%d] patchQuestionByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchQuestionByIDInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PatchQuestionByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
