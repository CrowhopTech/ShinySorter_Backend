// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CheckHealth(params *CheckHealthParams, opts ...ClientOption) (*CheckHealthOK, error)

	CreateImage(params *CreateImageParams, opts ...ClientOption) (*CreateImageCreated, error)

	CreateQuestion(params *CreateQuestionParams, opts ...ClientOption) (*CreateQuestionCreated, error)

	CreateTag(params *CreateTagParams, opts ...ClientOption) (*CreateTagCreated, error)

	DeleteQuestion(params *DeleteQuestionParams, opts ...ClientOption) (*DeleteQuestionOK, error)

	DeleteTag(params *DeleteTagParams, opts ...ClientOption) (*DeleteTagOK, error)

	GetImageByID(params *GetImageByIDParams, opts ...ClientOption) (*GetImageByIDOK, error)

	GetImageContent(params *GetImageContentParams, writer io.Writer, opts ...ClientOption) (*GetImageContentOK, error)

	ListImages(params *ListImagesParams, opts ...ClientOption) (*ListImagesOK, error)

	ListQuestions(params *ListQuestionsParams, opts ...ClientOption) (*ListQuestionsOK, error)

	ListTags(params *ListTagsParams, opts ...ClientOption) (*ListTagsOK, error)

	PatchImageByID(params *PatchImageByIDParams, opts ...ClientOption) (*PatchImageByIDOK, error)

	PatchQuestionByID(params *PatchQuestionByIDParams, opts ...ClientOption) (*PatchQuestionByIDOK, error)

	PatchTagByID(params *PatchTagByIDParams, opts ...ClientOption) (*PatchTagByIDOK, error)

	SetImageContent(params *SetImageContentParams, opts ...ClientOption) (*SetImageContentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CheckHealth check health API
*/
func (a *Client) CheckHealth(params *CheckHealthParams, opts ...ClientOption) (*CheckHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkHealth",
		Method:             "GET",
		PathPattern:        "/healthz",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkHealth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateImage Creates a new image entry
*/
func (a *Client) CreateImage(params *CreateImageParams, opts ...ClientOption) (*CreateImageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createImage",
		Method:             "POST",
		PathPattern:        "/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateImageCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateQuestion Creates a new question
*/
func (a *Client) CreateQuestion(params *CreateQuestionParams, opts ...ClientOption) (*CreateQuestionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateQuestionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createQuestion",
		Method:             "POST",
		PathPattern:        "/questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateQuestionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateQuestionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createQuestion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTag Creates a new tag
*/
func (a *Client) CreateTag(params *CreateTagParams, opts ...ClientOption) (*CreateTagCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTag",
		Method:             "POST",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTagCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteQuestion Deletes a question.
*/
func (a *Client) DeleteQuestion(params *DeleteQuestionParams, opts ...ClientOption) (*DeleteQuestionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQuestionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteQuestion",
		Method:             "DELETE",
		PathPattern:        "/questions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteQuestionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQuestionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteQuestion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTag Deletes a tag. Should also remove it from all images that use it.
*/
func (a *Client) DeleteTag(params *DeleteTagParams, opts ...ClientOption) (*DeleteTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTag",
		Method:             "DELETE",
		PathPattern:        "/tags/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetImageByID Gets the image metadata with the specified id
*/
func (a *Client) GetImageByID(params *GetImageByIDParams, opts ...ClientOption) (*GetImageByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getImageById",
		Method:             "GET",
		PathPattern:        "/images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getImageById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetImageContent Gets the image contents with the specified id
*/
func (a *Client) GetImageContent(params *GetImageContentParams, writer io.Writer, opts ...ClientOption) (*GetImageContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getImageContent",
		Method:             "GET",
		PathPattern:        "/images/contents/{id}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageContentReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getImageContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListImages Lists and queries images
*/
func (a *Client) ListImages(params *ListImagesParams, opts ...ClientOption) (*ListImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listImages",
		Method:             "GET",
		PathPattern:        "/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListQuestions Lists questions
*/
func (a *Client) ListQuestions(params *ListQuestionsParams, opts ...ClientOption) (*ListQuestionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListQuestionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listQuestions",
		Method:             "GET",
		PathPattern:        "/questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListQuestionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListQuestionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listQuestions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTags Lists tags and their metadata
*/
func (a *Client) ListTags(params *ListTagsParams, opts ...ClientOption) (*ListTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTags",
		Method:             "GET",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchImageByID Modifies the image metadata with the specified id
*/
func (a *Client) PatchImageByID(params *PatchImageByIDParams, opts ...ClientOption) (*PatchImageByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchImageByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchImageById",
		Method:             "PATCH",
		PathPattern:        "/images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchImageByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchImageByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchImageById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchQuestionByID Modifies question metadata
*/
func (a *Client) PatchQuestionByID(params *PatchQuestionByIDParams, opts ...ClientOption) (*PatchQuestionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchQuestionByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchQuestionByID",
		Method:             "PATCH",
		PathPattern:        "/questions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchQuestionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchQuestionByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchQuestionByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchTagByID Modifies tag metadata such as description, icon, etc.
*/
func (a *Client) PatchTagByID(params *PatchTagByIDParams, opts ...ClientOption) (*PatchTagByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTagByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchTagByID",
		Method:             "PATCH",
		PathPattern:        "/tags/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchTagByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTagByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchTagByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetImageContent Sets the image contents for the specified id
*/
func (a *Client) SetImageContent(params *SetImageContentParams, opts ...ClientOption) (*SetImageContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetImageContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setImageContent",
		Method:             "PATCH",
		PathPattern:        "/images/contents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetImageContentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetImageContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setImageContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
