// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CheckHealth(params *CheckHealthParams, opts ...ClientOption) (*CheckHealthOK, error)

	CreateFile(params *CreateFileParams, opts ...ClientOption) (*CreateFileCreated, error)

	CreateQuestion(params *CreateQuestionParams, opts ...ClientOption) (*CreateQuestionCreated, error)

	CreateTag(params *CreateTagParams, opts ...ClientOption) (*CreateTagCreated, error)

	DeleteQuestion(params *DeleteQuestionParams, opts ...ClientOption) (*DeleteQuestionOK, error)

	DeleteTag(params *DeleteTagParams, opts ...ClientOption) (*DeleteTagOK, error)

	GetFileByID(params *GetFileByIDParams, opts ...ClientOption) (*GetFileByIDOK, error)

	GetFileContent(params *GetFileContentParams, writer io.Writer, opts ...ClientOption) (*GetFileContentOK, error)

	ListFiles(params *ListFilesParams, opts ...ClientOption) (*ListFilesOK, error)

	ListQuestions(params *ListQuestionsParams, opts ...ClientOption) (*ListQuestionsOK, error)

	ListTags(params *ListTagsParams, opts ...ClientOption) (*ListTagsOK, error)

	PatchFileByID(params *PatchFileByIDParams, opts ...ClientOption) (*PatchFileByIDOK, error)

	PatchQuestionByID(params *PatchQuestionByIDParams, opts ...ClientOption) (*PatchQuestionByIDOK, error)

	PatchTagByID(params *PatchTagByIDParams, opts ...ClientOption) (*PatchTagByIDOK, error)

	ReorderQuestions(params *ReorderQuestionsParams, opts ...ClientOption) (*ReorderQuestionsOK, error)

	SetFileContent(params *SetFileContentParams, opts ...ClientOption) (*SetFileContentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CheckHealth check health API
*/
func (a *Client) CheckHealth(params *CheckHealthParams, opts ...ClientOption) (*CheckHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkHealth",
		Method:             "GET",
		PathPattern:        "/healthz",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkHealth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateFile Creates a new file entry
*/
func (a *Client) CreateFile(params *CreateFileParams, opts ...ClientOption) (*CreateFileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFile",
		Method:             "POST",
		PathPattern:        "/files/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateQuestion Creates a new question
*/
func (a *Client) CreateQuestion(params *CreateQuestionParams, opts ...ClientOption) (*CreateQuestionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateQuestionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createQuestion",
		Method:             "POST",
		PathPattern:        "/questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateQuestionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateQuestionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createQuestion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTag Creates a new tag
*/
func (a *Client) CreateTag(params *CreateTagParams, opts ...ClientOption) (*CreateTagCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTag",
		Method:             "POST",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTagCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteQuestion Deletes a question.
*/
func (a *Client) DeleteQuestion(params *DeleteQuestionParams, opts ...ClientOption) (*DeleteQuestionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQuestionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteQuestion",
		Method:             "DELETE",
		PathPattern:        "/questions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteQuestionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQuestionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteQuestion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTag Deletes a tag. Should also remove it from all files that use it.
*/
func (a *Client) DeleteTag(params *DeleteTagParams, opts ...ClientOption) (*DeleteTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTag",
		Method:             "DELETE",
		PathPattern:        "/tags/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFileByID Gets the file metadata with the specified id
*/
func (a *Client) GetFileByID(params *GetFileByIDParams, opts ...ClientOption) (*GetFileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileById",
		Method:             "GET",
		PathPattern:        "/files/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFileContent Gets the file contents with the specified id
*/
func (a *Client) GetFileContent(params *GetFileContentParams, writer io.Writer, opts ...ClientOption) (*GetFileContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileContent",
		Method:             "GET",
		PathPattern:        "/files/contents/{id}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileContentReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListFiles Lists and queries files
*/
func (a *Client) ListFiles(params *ListFilesParams, opts ...ClientOption) (*ListFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFiles",
		Method:             "GET",
		PathPattern:        "/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListQuestions Lists questions
*/
func (a *Client) ListQuestions(params *ListQuestionsParams, opts ...ClientOption) (*ListQuestionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListQuestionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listQuestions",
		Method:             "GET",
		PathPattern:        "/questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListQuestionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListQuestionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listQuestions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTags Lists tags and their metadata
*/
func (a *Client) ListTags(params *ListTagsParams, opts ...ClientOption) (*ListTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTags",
		Method:             "GET",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchFileByID Modifies the file metadata with the specified id
*/
func (a *Client) PatchFileByID(params *PatchFileByIDParams, opts ...ClientOption) (*PatchFileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchFileById",
		Method:             "PATCH",
		PathPattern:        "/files/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchFileByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchFileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchFileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchQuestionByID Modifies question metadata
*/
func (a *Client) PatchQuestionByID(params *PatchQuestionByIDParams, opts ...ClientOption) (*PatchQuestionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchQuestionByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchQuestionByID",
		Method:             "PATCH",
		PathPattern:        "/questions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchQuestionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchQuestionByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchQuestionByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchTagByID Modifies tag metadata such as description, icon, etc.
*/
func (a *Client) PatchTagByID(params *PatchTagByIDParams, opts ...ClientOption) (*PatchTagByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTagByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchTagByID",
		Method:             "PATCH",
		PathPattern:        "/tags/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchTagByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTagByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchTagByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReorderQuestions Reorders all questions (requires all question IDs to be passed in, e.g. a complete order)
*/
func (a *Client) ReorderQuestions(params *ReorderQuestionsParams, opts ...ClientOption) (*ReorderQuestionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReorderQuestionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reorderQuestions",
		Method:             "POST",
		PathPattern:        "/questions/reorder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReorderQuestionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReorderQuestionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reorderQuestions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetFileContent Sets the file contents for the specified id
*/
func (a *Client) SetFileContent(params *SetFileContentParams, opts ...ClientOption) (*SetFileContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetFileContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setFileContent",
		Method:             "PATCH",
		PathPattern:        "/files/contents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetFileContentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetFileContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setFileContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
