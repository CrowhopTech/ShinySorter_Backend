// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/CrowhopTech/shinysorter/backend/pkg/swagger/models"
)

// PatchFileByIDReader is a Reader for the PatchFileByID structure.
type PatchFileByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchFileByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchFileByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchFileByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchFileByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchFileByIDOK creates a PatchFileByIDOK with default headers values
func NewPatchFileByIDOK() *PatchFileByIDOK {
	return &PatchFileByIDOK{}
}

/* PatchFileByIDOK describes a response with status code 200, with default header values.

Returns the modified file.
*/
type PatchFileByIDOK struct {
	Payload *models.FileEntry
}

func (o *PatchFileByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /files/{id}][%d] patchFileByIdOK  %+v", 200, o.Payload)
}
func (o *PatchFileByIDOK) GetPayload() *models.FileEntry {
	return o.Payload
}

func (o *PatchFileByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FileEntry)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFileByIDBadRequest creates a PatchFileByIDBadRequest with default headers values
func NewPatchFileByIDBadRequest() *PatchFileByIDBadRequest {
	return &PatchFileByIDBadRequest{}
}

/* PatchFileByIDBadRequest describes a response with status code 400, with default header values.

Some part of the request was invalid. More information will be included in the error string
*/
type PatchFileByIDBadRequest struct {
	Payload string
}

func (o *PatchFileByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /files/{id}][%d] patchFileByIdBadRequest  %+v", 400, o.Payload)
}
func (o *PatchFileByIDBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PatchFileByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFileByIDInternalServerError creates a PatchFileByIDInternalServerError with default headers values
func NewPatchFileByIDInternalServerError() *PatchFileByIDInternalServerError {
	return &PatchFileByIDInternalServerError{}
}

/* PatchFileByIDInternalServerError describes a response with status code 500, with default header values.

Something else went wrong during the request
*/
type PatchFileByIDInternalServerError struct {
	Payload string
}

func (o *PatchFileByIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /files/{id}][%d] patchFileByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchFileByIDInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PatchFileByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
