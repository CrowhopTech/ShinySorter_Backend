// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new files API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for files API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFile(params *CreateFileParams, opts ...ClientOption) (*CreateFileCreated, error)

	GetFileByID(params *GetFileByIDParams, opts ...ClientOption) (*GetFileByIDOK, error)

	GetFileContent(params *GetFileContentParams, writer io.Writer, opts ...ClientOption) (*GetFileContentOK, error)

	ListFiles(params *ListFilesParams, opts ...ClientOption) (*ListFilesOK, error)

	PatchFileByID(params *PatchFileByIDParams, opts ...ClientOption) (*PatchFileByIDOK, error)

	SetFileContent(params *SetFileContentParams, opts ...ClientOption) (*SetFileContentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateFile Creates a new file entry
*/
func (a *Client) CreateFile(params *CreateFileParams, opts ...ClientOption) (*CreateFileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFile",
		Method:             "POST",
		PathPattern:        "/files/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFileByID Gets the file metadata with the specified id
*/
func (a *Client) GetFileByID(params *GetFileByIDParams, opts ...ClientOption) (*GetFileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileById",
		Method:             "GET",
		PathPattern:        "/files/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFileContent Gets the file contents with the specified id
*/
func (a *Client) GetFileContent(params *GetFileContentParams, writer io.Writer, opts ...ClientOption) (*GetFileContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileContent",
		Method:             "GET",
		PathPattern:        "/files/contents/{id}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileContentReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListFiles Lists and queries files
*/
func (a *Client) ListFiles(params *ListFilesParams, opts ...ClientOption) (*ListFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFiles",
		Method:             "GET",
		PathPattern:        "/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchFileByID Modifies the file metadata with the specified id
*/
func (a *Client) PatchFileByID(params *PatchFileByIDParams, opts ...ClientOption) (*PatchFileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchFileById",
		Method:             "PATCH",
		PathPattern:        "/files/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchFileByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchFileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchFileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetFileContent Sets the file contents for the specified id
*/
func (a *Client) SetFileContent(params *SetFileContentParams, opts ...ClientOption) (*SetFileContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetFileContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setFileContent",
		Method:             "PATCH",
		PathPattern:        "/files/contents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetFileContentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetFileContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setFileContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
